{"version":3,"sources":["components/soundx.js","firebase.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["possibleIntervals","SoundX","props","state","url","playing","loop","speed","isPlaying","Sound","status","PLAYING","buttonValue","interval","score","handleChange","bind","value","this","onScoreChange","class","onClick","setState","PAUSED","Math","floor","random","length","playStatus","playbackRate","React","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Main","renderWhich","username","items","handleScoreChange","handleSubmit","newScore","e","target","name","preventDefault","itemsRef","database","ref","item","push","itemId","remove","on","snapshot","val","newState","id","sort","first","second","gameScore","className","onSubmit","type","placeholder","onChange","map","key","removeItem","returnMain","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8105727b.chunk.js","sourcesContent":["import React from 'react';\nimport Sound from 'react-sound';\nimport \"../css/sound.css\"\n\nconst possibleIntervals = [12, 13, 14, 15, 16, 17, 18]\n\nclass SoundX extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n          url: this.props.url,\n          playing: this.props.playing,\n          loop: this.props.loop,\n          speed: this.props.speed,\n          isPlaying: this.props.playing === Sound.status.PLAYING ? true : false,\n          buttonValue: this.props.isPlaying ? \"Pause\" : \"Play\",\n          interval: 12,\n          score: this.props.score,\n        };\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(value) {\n        this.props.onScoreChange(value);\n    }\n\n    render(){\n        const score = this.props.score;\n        return(\n            <div class=\"soundcontainer\">\n                <div>\n                    <h3>\n                        Score: {score}\n                    </h3>  \n                </div>\n                <div>\n                    <button \n                        onClick = {() => this.state.isPlaying ? \n                        this.setState({playing: Sound.status.PAUSED, isPlaying: false, buttonValue: \"Play\"}) : \n                        this.setState({playing: Sound.status.PLAYING, isPlaying: true, buttonValue: \"Pause\"})}\n                    >\n                    {this.state.buttonValue}\n                    </button>\n                </div>\n                <div>\n                    <button \n                        onClick = {() => this.handleChange(score + 1)}\n                    >\n                    Change Score!\n                    </button>\n                </div>\n                <div>\n                    <button\n                        onClick = {() => \n                        this.setState({\n                            interval: possibleIntervals[Math.floor(Math.random()*possibleIntervals.length)],\n                            url: \"https://raw.githubusercontent.com/matthewlee626/listen/master/src/music/\" + this.state.interval + \".mp3\",\n                        })\n                        }\n                    >\n                    New Interval!\n                    </button>\n                </div>\n                <Sound\n                    url= {this.state.url}\n                    playStatus={this.state.playing}\n                    loop={this.state.loop}\n                    playbackRate={this.state.speed}\n                />\n            </div>\n        )\n    }\n}\n\nexport default SoundX;","import firebase from 'firebase'\nconst config = {\n    apiKey: \"AIzaSyAA4JA4UBLe3Zn2mzD6ppQWGYXnvsrVZQs\",\n    authDomain: \"octavo-501f9.firebaseapp.com\",\n    databaseURL: \"https://octavo-501f9.firebaseio.com\",\n    projectId: \"octavo-501f9\",\n    storageBucket: \"\",\n    messagingSenderId: \"438954623086\",\n    appId: \"1:438954623086:web:5b8acc91bf22c0efc7267f\"\n};\nfirebase.initializeApp(config);\nexport default firebase;","import React from 'react';\nimport './App.css';\nimport \"./css/sound.css\"\n\n//import Header from './components/header.js'\n\nimport Sound from 'react-sound';\nimport SoundX from \"./components/soundx.js\"\n\n//import Footer from './components/footer.js';\n\nimport firebase from \"./firebase.js\"\n\nclass Main extends React.Component{\n  constructor(props) {\n    super(props);\n    //this.handleScoreChange = this.handleScoreChange.bind(this);\n    this.state = {\n      playing: Sound.status.PAUSED,\n      renderWhich: 0,  /* 0 for the default, 1 for about*/ \n      score: 0,\n      username: '',\n      items: [],\n    };\n    this.handleScoreChange = this.handleScoreChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleScoreChange(newScore){\n    this.setState({score: newScore});\n  }\n\n  handleChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    const itemsRef = firebase.database().ref('items');\n    const item = {\n      score: this.state.score,\n      username: this.state.username\n    }\n    itemsRef.push(item);\n    this.setState({\n      score: 0,\n      username: ''\n    });\n  }\n\n  removeItem(itemId) {\n    const itemRef = firebase.database().ref(`/items/${itemId}`);\n    itemRef.remove();\n  }\n\n  componentDidMount() {\n    const itemsRef = firebase.database().ref('items');\n    itemsRef.on('value', (snapshot) => {\n      let items = snapshot.val();\n      let newState = [];\n      // eslint-disable-next-line\n      for (let item in items) {\n        newState.push({\n          id: item,\n          score: items[item].score,\n          username: items[item].username\n        });\n      }\n      newState.sort(function(first, second) {\n        return second.score - first.score;\n       });\n      this.setState({\n        items: newState\n      });\n    });\n  }\n\n  returnMain(){\n    const gameScore = this.state.score;\n\n    return(      \n      <div>\n        <div className='app'>\n          <header>\n              <div className='wrapper'>\n                <h1>Octavo</h1>\n              </div>\n          </header>\n          <div className='container'>\n            <div className='sound'>\n              <SoundX\n                  url= {\"https://raw.githubusercontent.com/matthewlee626/listen/master/src/music/12.mp3\"}\n                  playing = {this.state.playing} \n                  loop={true} \n                  speed={1}\n                  score={gameScore}\n                  onScoreChange={this.handleScoreChange}\n              >\n              </SoundX>\n            </div>\n            <section className='add-item'>\n              <h3>Submit your score!</h3>\n                <form onSubmit={this.handleSubmit}>\n                  <input type=\"text\" name=\"username\" placeholder=\"What's your name?\" onChange={this.handleChange} value={this.state.username} />\n                  <button>Add Score</button>\n                </form>\n            </section>\n            <section className='display-item'>\n              <div className=\"wrapper\">\n                <ul>\n                  {this.state.items.map((item) => {\n                    return (\n                      <li key={item.id}>\n                        <h3>{item.username === \"\" ? 'Anonymous' : item.username}</h3>\n                        <p>Score: {item.score}</p>\n                        <button onClick={() => this.removeItem(item.id)}>Remove Item</button>\n                      </li>\n                    )\n                  })}\n                </ul>\n              </div>\n            </section>\n          </div>\n          <footer>\n            <div className='wrapper'>\n              <p>matthewlee.xyz © 2019</p>\n            </div>\n          </footer>\n        </div>\n      </div>\n    )\n  }\n\n  render(){      \n    if (this.state.renderWhich === 0){\n      return (\n        this.returnMain()\n      );\n    }\n  }\n}\n\n/*\n    <div className=\"App\">\n          <header className=\"App-header\">\n            <p style={pStyle}>\n              What interval is this?\n            </p>        \n            <SoundX \n                url= {\"https://raw.githubusercontent.com/matthewlee626/listen/master/src/music/12.mp3\"}\n                playing = {this.state.playing} \n                loop={true} \n                speed={1}\n                score={gameScore}\n                onScoreChange={this.handleScoreChange}\n              >\n            </SoundX>\n            <div>\n              <form onSubmit={this.handleSubmit}>\n                <input type=\"text\" name=\"username\" placeholder=\"What's your name?\" onChange={this.handleChange} value={this.state.username} />\n                <button className=\"special\">Add Item</button>\n              </form>\n              \n            </div>\n          </header>\n        </div>\n\n*/\nexport default Main;\n","import React from 'react';\nimport Main from './Main.js'\n\nclass App extends React.Component{\n  render(){      \n    return (\n      <Main></Main>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}