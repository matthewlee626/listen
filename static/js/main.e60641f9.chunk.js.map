{"version":3,"sources":["components/header.js","components/soundx.js","components/footer.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","class","href","possibleIntervals","SoundX","props","state","url","playing","loop","speed","isPlaying","Sound","status","PLAYING","buttonValue","interval","score","handleChange","bind","value","this","onScoreChange","className","onClick","setState","PAUSED","Math","floor","random","length","playStatus","playbackRate","React","Component","Footer","target","rel","pStyle","color","Main","renderWhich","handleScoreChange","newScore","gameScore","style","returnMain","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e60641f9.chunk.js","sourcesContent":["import React from 'react';\nimport '../css/header.css'\n\nfunction Header() {\n  return (\n    <div class=\"header\">\n        <a href=\"#default\" class=\"logo\">Octavo</a>\n        <div class=\"header-right\">\n            <a href=\"#about\">About</a>\n        </div>\n    </div> \n  );\n}\n\nexport default Header;","import React from 'react';\nimport Sound from 'react-sound';\nimport \"../css/sound.css\"\n\nconst possibleIntervals = [12, 13, 14, 15, 16, 17, 18]\n\nclass SoundX extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n          url: this.props.url,\n          playing: this.props.playing,\n          loop: this.props.loop,\n          speed: this.props.speed,\n          isPlaying: this.props.playing === Sound.status.PLAYING ? true : false,\n          buttonValue: this.props.isPlaying ? \"Pause\" : \"Play\",\n          interval: 12,\n          score: this.props.score,\n        };\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(value) {\n        this.props.onScoreChange(value);\n    }\n\n    render(){\n        const score = this.props.score;\n        return(\n            <div>\n                <div>\n                    <p>\n                        Score: {score}\n                    </p>  \n                </div>\n                <div>\n                    <button className = \"special\"\n                        onClick = {() => this.state.isPlaying ? \n                        this.setState({playing: Sound.status.PAUSED, isPlaying: false, buttonValue: \"Play\"}) : \n                        this.setState({playing: Sound.status.PLAYING, isPlaying: true, buttonValue: \"Pause\"})}\n                    >\n                    {this.state.buttonValue}\n                    </button>\n                </div>\n                <div>\n                    <button className = \"special\"\n                        onClick = {() => this.handleChange(score + 1)}\n                    >\n                    Change Score!\n                    </button>\n                </div>\n                <div>\n                    <button className = \"special\"\n                        onClick = {() => \n                        this.setState({\n                            interval: possibleIntervals[Math.floor(Math.random()*possibleIntervals.length)],\n                            url: \"https://raw.githubusercontent.com/matthewlee626/listen/master/src/music/\" + this.state.interval + \".mp3\",\n                        })\n                        }\n                    >\n                    New Interval!\n                    </button>\n                </div>\n                <Sound\n                    url= {this.state.url}\n                    playStatus={this.state.playing}\n                    loop={this.state.loop}\n                    playbackRate={this.state.speed}\n                />\n            </div>\n        )\n    }\n}\n\nexport default SoundX;","import React from 'react';\nimport '../css/header.css'\n\nfunction Footer() {\n  return (\n    <div class=\"header\">\n        <a href=\"#index\">Matthew Lee &#169; 2019</a>\n        <div class=\"header-right\">\n            <a href=\"https://matthewlee.xyz\" target=\"_blank\" rel=\"noopener noreferrer\">matthewlee.xyz</a>   \n        </div>  \n    </div> \n  );\n}\n\nexport default Footer;","import React from 'react';\nimport './App.css';\n\nimport Header from './components/header.js'\n\nimport Sound from 'react-sound';\nimport SoundX from \"./components/soundx.js\"\n\nimport Footer from './components/footer.js';\n\nconst pStyle = {\n  color: 'black',\n};\n\nclass Main extends React.Component{\n  constructor(props) {\n    super(props);\n    //this.handleScoreChange = this.handleScoreChange.bind(this);\n    this.state = {\n      playing: Sound.status.PAUSED,\n      renderWhich: 0,  /* 0 for the default, 1 for about*/ \n      score: 0,\n    };\n    this.handleScoreChange = this.handleScoreChange.bind(this);\n  }\n\n  handleScoreChange(newScore){\n    this.setState({score: newScore});\n  }\n\n  returnMain(){\n    const gameScore = this.state.score;\n\n    return(      \n      <div>\n        <Header></Header>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <p style={pStyle}>\n              What interval is this?\n            </p>        \n            <SoundX \n                url= {\"https://raw.githubusercontent.com/matthewlee626/listen/master/src/music/12.mp3\"}\n                playing = {this.state.playing} \n                loop={true} \n                speed={1}\n                score={gameScore}\n                onScoreChange={this.handleScoreChange}\n              >\n            </SoundX>\n          </header>\n        </div>\n        <Footer></Footer>\n      </div>\n    )\n  }\n\n  render(){      \n    if (this.state.renderWhich === 0){\n      return (\n        this.returnMain()\n      );\n    }\n  }\n}\n\nexport default Main;\n","import React from 'react';\nimport Main from './Main.js'\n\nclass App extends React.Component{\n  render(){      \n    return (\n      <Main></Main>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}